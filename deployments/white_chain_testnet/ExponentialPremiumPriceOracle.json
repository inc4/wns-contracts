{
  "address": "0xb655BC258fDaFEa6eb29C3e08a2BBdB2F65CC791",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract AggregatorInterface",
          "name": "_usdOracle",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_rentPrices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_startPremium",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalDays",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "prices",
          "type": "uint256[]"
        }
      ],
      "name": "RentPriceChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "startPremium",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "elapsed",
          "type": "uint256"
        }
      ],
      "name": "decayedPremium",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "expires",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "premium",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "expires",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "price",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "base",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "premium",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPriceOracle.Price",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price1Letter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price2Letter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price3Letter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price4Letter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price5Letter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price6Letter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "expires",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "priceUSDCe",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "base",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "premium",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPriceOracle.Price",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "rentPrices",
          "type": "uint256[]"
        }
      ],
      "name": "updatePrices",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdOracle",
      "outputs": [
        {
          "internalType": "contract AggregatorInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xeedcf91144eec1987258a67570cb3c505a814efa6277c0145dc5e5a77a763f0a",
  "receipt": {
    "to": null,
    "from": "0x77Dd695dFEB43195707F470A0B1CE3ecC4AFC1Ce",
    "contractAddress": "0xb655BC258fDaFEa6eb29C3e08a2BBdB2F65CC791",
    "transactionIndex": 2,
    "gasUsed": "1153415",
    "logsBloom": "0x
    "blockHash": "0x04fc1cee79a95900d6923f0543ef3ffc04d63d33d5f9d8782bace337079352b8",
    "transactionHash": "0xeedcf91144eec1987258a67570cb3c505a814efa6277c0145dc5e5a77a763f0a",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 17974155,
        "transactionHash": "0xeedcf91144eec1987258a67570cb3c505a814efa6277c0145dc5e5a77a763f0a",
        "address": "0xb655BC258fDaFEa6eb29C3e08a2BBdB2F65CC791",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000077dd695dfeb43195707f470a0b1ce3ecc4afc1ce"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x04fc1cee79a95900d6923f0543ef3ffc04d63d33d5f9d8782bace337079352b8"
      }
    ],
    "blockNumber": 17974155,
    "cumulativeGasUsed": "1195415",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xb31C0529fa0efed300FE3eEE8FF904E15cF85F14",
    [
      "0",
      "31709791983765",
      "3139269406393",
      "1553779807204",
      "95129375951",
      "31709791984"
    ],
    "100000000000000000000000000",
    "21"
  ],
  "numDeployments": 1,
  "solcInputHash": "b975d7842cb6d41828fbf1c9a6aee9a1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract AggregatorInterface\",\"name\":\"_usdOracle\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_rentPrices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_startPremium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDays\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"}],\"name\":\"RentPriceChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startPremium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"elapsed\",\"type\":\"uint256\"}],\"name\":\"decayedPremium\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"premium\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"price\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"}],\"internalType\":\"struct IPriceOracle.Price\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price1Letter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price2Letter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price3Letter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price4Letter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price5Letter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price6Letter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"priceUSDCe\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"}],\"internalType\":\"struct IPriceOracle.Price\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"rentPrices\",\"type\":\"uint256[]\"}],\"name\":\"updatePrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdOracle\",\"outputs\":[{\"internalType\":\"contract AggregatorInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"decayedPremium(uint256,uint256)\":{\"details\":\"Returns the premium price at current time elapsed\",\"params\":{\"elapsed\":\"time past since expiry\",\"startPremium\":\"starting price\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"premium(string,uint256,uint256)\":{\"details\":\"Returns the pricing premium in wei.\"},\"price(string,uint256,uint256)\":{\"details\":\"Returns the price to register or renew a name.\",\"params\":{\"duration\":\"How long the name is being registered or extended for, in seconds.\",\"expires\":\"When the name presently expires (0 if this is a new registration).\",\"name\":\"The name being registered or renewed.\"},\"returns\":{\"_0\":\"base premium tuple of base price + premium price\"}},\"priceUSDCe(string,uint256,uint256)\":{\"details\":\"Returns the price in USDC.e to register or renew a name.\",\"params\":{\"duration\":\"How long the name is being registered or extended for, in seconds.\",\"expires\":\"When the name presently expires (0 if this is a new registration).\",\"name\":\"The name being registered or renewed.\"},\"returns\":{\"_0\":\"base premium tuple of base price + premium price\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ethregistrar/ExponentialPremiumPriceOracle.sol\":\"ExponentialPremiumPriceOracle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/ethregistrar/ExponentialPremiumPriceOracle.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\nimport \\\"./StablePriceOracle.sol\\\";\\n\\ncontract ExponentialPremiumPriceOracle is StablePriceOracle {\\n    uint256 constant GRACE_PERIOD = 30 days;\\n    uint256 immutable startPremium;\\n    uint256 immutable endValue;\\n\\n    constructor(\\n        AggregatorInterface _usdOracle,\\n        uint256[] memory _rentPrices,\\n        uint256 _startPremium,\\n        uint256 totalDays\\n    ) StablePriceOracle(_usdOracle, _rentPrices) {\\n        startPremium = _startPremium;\\n        endValue = _startPremium >> totalDays;\\n    }\\n\\n    uint256 constant PRECISION = 1e18;\\n    uint256 constant bit1 = 999989423469314432; // 0.5 ^ 1/65536 * (10 ** 18)\\n    uint256 constant bit2 = 999978847050491904; // 0.5 ^ 2/65536 * (10 ** 18)\\n    uint256 constant bit3 = 999957694548431104;\\n    uint256 constant bit4 = 999915390886613504;\\n    uint256 constant bit5 = 999830788931929088;\\n    uint256 constant bit6 = 999661606496243712;\\n    uint256 constant bit7 = 999323327502650752;\\n    uint256 constant bit8 = 998647112890970240;\\n    uint256 constant bit9 = 997296056085470080;\\n    uint256 constant bit10 = 994599423483633152;\\n    uint256 constant bit11 = 989228013193975424;\\n    uint256 constant bit12 = 978572062087700096;\\n    uint256 constant bit13 = 957603280698573696;\\n    uint256 constant bit14 = 917004043204671232;\\n    uint256 constant bit15 = 840896415253714560;\\n    uint256 constant bit16 = 707106781186547584;\\n\\n    /**\\n     * @dev Returns the pricing premium in internal base units.\\n     */\\n    function _premium(\\n        string memory,\\n        uint256 expires,\\n        uint256\\n    ) internal view override returns (uint256) {\\n        expires = expires + GRACE_PERIOD;\\n        if (expires > block.timestamp) {\\n            return 0;\\n        }\\n\\n        uint256 elapsed = block.timestamp - expires;\\n        uint256 premium = decayedPremium(startPremium, elapsed);\\n        if (premium >= endValue) {\\n            return premium - endValue;\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Returns the premium price at current time elapsed\\n     * @param startPremium starting price\\n     * @param elapsed time past since expiry\\n     */\\n    function decayedPremium(\\n        uint256 startPremium,\\n        uint256 elapsed\\n    ) public pure returns (uint256) {\\n        uint256 daysPast = (elapsed * PRECISION) / 1 days;\\n        uint256 intDays = daysPast / PRECISION;\\n        uint256 premium = startPremium >> intDays;\\n        uint256 partDay = (daysPast - intDays * PRECISION);\\n        uint256 fraction = (partDay * (2 ** 16)) / PRECISION;\\n        uint256 totalPremium = addFractionalPremium(fraction, premium);\\n        return totalPremium;\\n    }\\n\\n    function addFractionalPremium(\\n        uint256 fraction,\\n        uint256 premium\\n    ) internal pure returns (uint256) {\\n        if (fraction & (1 << 0) != 0) {\\n            premium = (premium * bit1) / PRECISION;\\n        }\\n        if (fraction & (1 << 1) != 0) {\\n            premium = (premium * bit2) / PRECISION;\\n        }\\n        if (fraction & (1 << 2) != 0) {\\n            premium = (premium * bit3) / PRECISION;\\n        }\\n        if (fraction & (1 << 3) != 0) {\\n            premium = (premium * bit4) / PRECISION;\\n        }\\n        if (fraction & (1 << 4) != 0) {\\n            premium = (premium * bit5) / PRECISION;\\n        }\\n        if (fraction & (1 << 5) != 0) {\\n            premium = (premium * bit6) / PRECISION;\\n        }\\n        if (fraction & (1 << 6) != 0) {\\n            premium = (premium * bit7) / PRECISION;\\n        }\\n        if (fraction & (1 << 7) != 0) {\\n            premium = (premium * bit8) / PRECISION;\\n        }\\n        if (fraction & (1 << 8) != 0) {\\n            premium = (premium * bit9) / PRECISION;\\n        }\\n        if (fraction & (1 << 9) != 0) {\\n            premium = (premium * bit10) / PRECISION;\\n        }\\n        if (fraction & (1 << 10) != 0) {\\n            premium = (premium * bit11) / PRECISION;\\n        }\\n        if (fraction & (1 << 11) != 0) {\\n            premium = (premium * bit12) / PRECISION;\\n        }\\n        if (fraction & (1 << 12) != 0) {\\n            premium = (premium * bit13) / PRECISION;\\n        }\\n        if (fraction & (1 << 13) != 0) {\\n            premium = (premium * bit14) / PRECISION;\\n        }\\n        if (fraction & (1 << 14) != 0) {\\n            premium = (premium * bit15) / PRECISION;\\n        }\\n        if (fraction & (1 << 15) != 0) {\\n            premium = (premium * bit16) / PRECISION;\\n        }\\n        return premium;\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceID\\n    ) public view virtual override returns (bool) {\\n        return super.supportsInterface(interfaceID);\\n    }\\n}\\n\",\"keccak256\":\"0x1c1b6ac1bdc7f6112210c86b2f6d7f2dccc350dc303a1381fe7f6d4b2ad7df5e\",\"license\":\"MIT\"},\"contracts/ethregistrar/IPriceOracle.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.17 <0.9.0;\\n\\ninterface IPriceOracle {\\n    struct Price {\\n        uint256 base;\\n        uint256 premium;\\n    }\\n\\n    /**\\n     * @dev Returns the price to register or renew a name.\\n     * @param name The name being registered or renewed.\\n     * @param expires When the name presently expires (0 if this is a new registration).\\n     * @param duration How long the name is being registered or extended for, in seconds.\\n     * @return base premium tuple of base price + premium price\\n     */\\n    function price(\\n        string calldata name,\\n        uint256 expires,\\n        uint256 duration\\n    ) external view returns (Price calldata);\\n\\n    /**\\n     * @dev Returns the price in USDC.e to register or renew a name.\\n     * @param name The name being registered or renewed.\\n     * @param expires When the name presently expires (0 if this is a new registration).\\n     * @param duration How long the name is being registered or extended for, in seconds.\\n     * @return base premium tuple of base price + premium price\\n     */\\n    function priceUSDCe(\\n        string calldata name,\\n        uint256 expires,\\n        uint256 duration\\n    ) external view returns (Price calldata);\\n}\\n\",\"keccak256\":\"0x4dff9ac95bd7244a7a92cb18a5841d3e585f6c88121a6b36b1ba1148e5ee4b78\",\"license\":\"MIT\"},\"contracts/ethregistrar/StablePriceOracle.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\nimport \\\"./IPriceOracle.sol\\\";\\nimport \\\"./StringUtils.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface AggregatorInterface {\\n    function latestAnswer() external view returns (int256);\\n}\\n\\n// StablePriceOracle sets a price in USD, based on an oracle.\\ncontract StablePriceOracle is Ownable, IPriceOracle {\\n    using StringUtils for *;\\n\\n    // Rent in base price units by length\\n    uint256 public price1Letter;\\n    uint256 public price2Letter;\\n    uint256 public price3Letter;\\n    uint256 public price4Letter;\\n    uint256 public price5Letter;\\n    uint256 public price6Letter;\\n\\n    // Oracle address\\n    AggregatorInterface public immutable usdOracle;\\n\\n    event RentPriceChanged(uint256[] prices);\\n\\n    constructor(AggregatorInterface _usdOracle, uint256[] memory _rentPrices) {\\n        usdOracle = _usdOracle;\\n        price1Letter = _rentPrices[0];\\n        price2Letter = _rentPrices[1];\\n        price3Letter = _rentPrices[2];\\n        price4Letter = _rentPrices[3];\\n        price5Letter = _rentPrices[4];\\n        price6Letter = _rentPrices[5];\\n    }\\n\\n    function price(\\n        string calldata name,\\n        uint256 expires,\\n        uint256 duration\\n    ) external view override returns (IPriceOracle.Price memory) {\\n        uint256 basePrice = _calculateBasePrice(name, duration);\\n\\n        return\\n            IPriceOracle.Price({\\n                base: attoUSDToWei(basePrice),\\n                premium: attoUSDToWei(_premium(name, expires, duration))\\n            });\\n    }\\n\\n    function priceUSDCe(\\n        string calldata name,\\n        uint256 expires,\\n        uint256 duration\\n    ) external view returns (IPriceOracle.Price memory) {\\n        uint256 basePrice = _calculateBasePrice(name, duration);\\n\\n        return\\n            IPriceOracle.Price({\\n                base: attoUSDToUSDCe(basePrice),\\n                premium: attoUSDToUSDCe(_premium(name, expires, duration))\\n            });\\n    }\\n\\n    function updatePrices(uint256[] memory rentPrices) external onlyOwner {\\n        price1Letter = rentPrices[0];\\n        price2Letter = rentPrices[1];\\n        price3Letter = rentPrices[2];\\n        price4Letter = rentPrices[3];\\n        price5Letter = rentPrices[4];\\n        price6Letter = rentPrices[5];\\n\\n        emit RentPriceChanged(rentPrices);\\n    }\\n\\n    /**\\n     * @dev Returns the pricing premium in wei.\\n     */\\n    function premium(\\n        string calldata name,\\n        uint256 expires,\\n        uint256 duration\\n    ) external view returns (uint256) {\\n        return attoUSDToWei(_premium(name, expires, duration));\\n    }\\n\\n    /**\\n     * @dev Returns the pricing premium in internal base units.\\n     */\\n    function _premium(\\n        string memory name,\\n        uint256 expires,\\n        uint256 duration\\n    ) internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    function attoUSDToUSDCe(uint256 amount) internal pure returns (uint256) {\\n        return amount / 1e12;\\n    }\\n\\n    function attoUSDToWei(uint256 amount) internal view returns (uint256) {\\n        uint256 ethPrice = uint256(usdOracle.latestAnswer());\\n        return (amount * 1e8) / ethPrice;\\n    }\\n\\n    function weiToAttoUSD(uint256 amount) internal view returns (uint256) {\\n        uint256 ethPrice = uint256(usdOracle.latestAnswer());\\n        return (amount * ethPrice) / 1e8;\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceID\\n    ) public view virtual returns (bool) {\\n        return\\n            interfaceID == type(IERC165).interfaceId ||\\n            interfaceID == type(IPriceOracle).interfaceId;\\n    }\\n\\n    function _calculateBasePrice(\\n        string calldata name,\\n        uint256 duration\\n    ) internal view returns (uint256) {\\n        uint256 len = name.strlen();\\n        uint256 basePrice;\\n\\n        if (len >= 6) {\\n            basePrice = price6Letter * duration;\\n        } else if (len == 5) {\\n            basePrice = price5Letter * duration;\\n        } else if (len == 4) {\\n            basePrice = price4Letter * duration;\\n        } else if (len == 3) {\\n            basePrice = price3Letter * duration;\\n        } else if (len == 2) {\\n            basePrice = price2Letter * duration;\\n        } else {\\n            basePrice = price1Letter * duration;\\n        }\\n\\n        return basePrice;\\n    }\\n}\\n\",\"keccak256\":\"0x5a577fc8285859217382d6974bfcf847793eabfe3204d67e9cd0865e28055e0d\",\"license\":\"MIT\"},\"contracts/ethregistrar/StringUtils.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\nlibrary StringUtils {\\n    /**\\n     * @dev Returns the length of a given string\\n     *\\n     * @param s The string to measure the length of\\n     * @return The length of the input string\\n     */\\n    function strlen(string memory s) internal pure returns (uint256) {\\n        uint256 len;\\n        uint256 i = 0;\\n        uint256 bytelength = bytes(s).length;\\n        for (len = 0; i < bytelength; len++) {\\n            bytes1 b = bytes(s)[i];\\n            if (b < 0x80) {\\n                i += 1;\\n            } else if (b < 0xE0) {\\n                i += 2;\\n            } else if (b < 0xF0) {\\n                i += 3;\\n            } else if (b < 0xF8) {\\n                i += 4;\\n            } else if (b < 0xFC) {\\n                i += 5;\\n            } else {\\n                i += 6;\\n            }\\n        }\\n        return len;\\n    }\\n}\\n\",\"keccak256\":\"0x4cc8363a850dc9130c433ee50e7c97e29a45ae5d9bd0808205ac7134b34f24e4\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b5060405162001476380380620014768339810160408190526200003491620001a0565b838362000041336200013a565b6001600160a01b038216608052805181906000906200006457620000646200029b565b6020026020010151600181905550806001815181106200008857620000886200029b565b602002602001015160028190555080600281518110620000ac57620000ac6200029b565b602002602001015160038190555080600381518110620000d057620000d06200029b565b602002602001015160048190555080600481518110620000f457620000f46200029b565b6020026020010151600581905550806005815181106200011857620001186200029b565b6020908102919091010151600655505060a08290521c60c05250620002b19050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215620001b757600080fd5b84516001600160a01b0381168114620001cf57600080fd5b602086810151919550906001600160401b0380821115620001ef57600080fd5b818801915088601f8301126200020457600080fd5b8151818111156200021957620002196200018a565b8060051b604051601f19603f830116810181811085821117156200024157620002416200018a565b60405291825284820192508381018501918b8311156200026057600080fd5b938501935b82851015620002805784518452938501939285019262000265565b60408b01516060909b0151999c909b50975050505050505050565b634e487b7160e01b600052603260045260246000fd5b60805160a05160c051611187620002ef6000396000818161088a01526108b4015260006108610152600081816101fa015261079001526111876000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c8063a200e15311610097578063cd5d2c7411610066578063cd5d2c741461021c578063cf00716f14610225578063d820ed4214610238578063f2fde38b1461024157600080fd5b8063a200e153146101c6578063a34e3596146101cf578063b86360c6146101e2578063c8a4271f146101f557600080fd5b806359b6b86c116100d357806359b6b86c1461017b57806359e1777c14610184578063715018a6146101975780638da5cb5b146101a157600080fd5b806301ffc9a7146101055780630261d9421461012d5780632c0fd74c1461014457806350e9a7151461014d575b600080fd5b610118610113366004610e70565b610254565b60405190151581526020015b60405180910390f35b61013660065481565b604051908152602001610124565b61013660015481565b61016061015b366004610eb2565b610265565b60408051825181526020928301519281019290925201610124565b61013660055481565b610136610192366004610f31565b6102f8565b61019f610393565b005b6000546001600160a01b03165b6040516001600160a01b039091168152602001610124565b61013660035481565b6101366101dd366004610eb2565b6103a7565b6101606101f0366004610eb2565b6103f8565b6101ae7f000000000000000000000000000000000000000000000000000000000000000081565b61013660025481565b61019f610233366004610f69565b61047f565b61013660045481565b61019f61024f366004611027565b610587565b600061025f8261061c565b92915050565b604080518082019091526000808252602082015260006102868686856106b4565b9050604051806040016040528061029c8361078b565b81526020016102ec6102e789898080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508b92508a915061082b9050565b61078b565b90529695505050505050565b60008062015180610311670de0b6b3a764000085611066565b61031b919061107d565b90506000610331670de0b6b3a76400008361107d565b905084811c600061034a670de0b6b3a764000084611066565b610354908561109f565b90506000670de0b6b3a764000061036e8362010000611066565b610378919061107d565b9050600061038682856108ee565b9998505050505050505050565b61039b610c0e565b6103a56000610c68565b565b60006103ef6102e786868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525088925087915061082b9050565b95945050505050565b604080518082019091526000808252602082015260006104198686856106b4565b9050604051806040016040528061042f83610cd0565b81526020016102ec61047a89898080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508b92508a915061082b9050565b610cd0565b610487610c0e565b8060008151811061049a5761049a6110b2565b6020026020010151600181905550806001815181106104bb576104bb6110b2565b6020026020010151600281905550806002815181106104dc576104dc6110b2565b6020026020010151600381905550806003815181106104fd576104fd6110b2565b60200260200101516004819055508060048151811061051e5761051e6110b2565b60200260200101516005819055508060058151811061053f5761053f6110b2565b60200260200101516006819055507f73422d94aedd596c2d4d39f27a01033adc390a9054efaf259afefd95ef7331df8160405161057c91906110c8565b60405180910390a150565b61058f610c0e565b6001600160a01b0381166106105760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b61061981610c68565b50565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a700000000000000000000000000000000000000000000000000000000148061025f57507fffffffff0000000000000000000000000000000000000000000000000000000082167fe88ac7d3000000000000000000000000000000000000000000000000000000001492915050565b6000806106f685858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610ce192505050565b905060006006821061071757836006546107109190611066565b9050610780565b8160050361072d57836005546107109190611066565b8160040361074357836004546107109190611066565b8160030361075957836003546107109190611066565b8160020361076f57836002546107109190611066565b8360015461077d9190611066565b90505b9150505b9392505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166350d25bcd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107ec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610810919061110c565b905080610821846305f5e100611066565b610784919061107d565b600061083a62278d0084611125565b92504283111561084c57506000610784565b6000610858844261109f565b905060006108867f0000000000000000000000000000000000000000000000000000000000000000836102f8565b90507f000000000000000000000000000000000000000000000000000000000000000081106108e2576108d97f00000000000000000000000000000000000000000000000000000000000000008261109f565b92505050610784565b50600095945050505050565b6000600183161561092157670de0b6b3a7640000610914670de0ad151d09418084611066565b61091e919061107d565b91505b600283161561095257670de0b6b3a7640000610945670de0a3769959680084611066565b61094f919061107d565b91505b600483161561098357670de0b6b3a7640000610976670de09039a5fa510084611066565b610980919061107d565b91505b60088316156109b457670de0b6b3a76400006109a7670de069c00f3e120084611066565b6109b1919061107d565b91505b60108316156109e557670de0b6b3a76400006109d8670de01cce21c9440084611066565b6109e2919061107d565b91505b6020831615610a1657670de0b6b3a7640000610a09670ddf82ef46ce100084611066565b610a13919061107d565b91505b6040831615610a4757670de0b6b3a7640000610a3a670dde4f458f8e8d8084611066565b610a44919061107d565b91505b6080831615610a7857670de0b6b3a7640000610a6b670ddbe84213d5f08084611066565b610a75919061107d565b91505b610100831615610aaa57670de0b6b3a7640000610a9d670dd71b7aa6df5b8084611066565b610aa7919061107d565b91505b610200831615610adc57670de0b6b3a7640000610acf670dcd86e7f28cde0084611066565b610ad9919061107d565b91505b610400831615610b0e57670de0b6b3a7640000610b01670dba71a3084ad68084611066565b610b0b919061107d565b91505b610800831615610b4057670de0b6b3a7640000610b33670d94961b13dbde8084611066565b610b3d919061107d565b91505b611000831615610b7257670de0b6b3a7640000610b65670d4a171c35c9838084611066565b610b6f919061107d565b91505b612000831615610ba457670de0b6b3a7640000610b97670cb9da519ccfb70084611066565b610ba1919061107d565b91505b614000831615610bd657670de0b6b3a7640000610bc9670bab76d59c18d68084611066565b610bd3919061107d565b91505b618000831615610c0857670de0b6b3a7640000610bfb6709d025defee4df8084611066565b610c05919061107d565b91505b50919050565b6000546001600160a01b031633146103a55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610607565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600061025f64e8d4a510008361107d565b8051600090819081905b80821015610e67576000858381518110610d0757610d076110b2565b01602001516001600160f81b03191690507f8000000000000000000000000000000000000000000000000000000000000000811015610d5257610d4b600184611125565b9250610e54565b7fe0000000000000000000000000000000000000000000000000000000000000006001600160f81b031982161015610d8f57610d4b600284611125565b7ff0000000000000000000000000000000000000000000000000000000000000006001600160f81b031982161015610dcc57610d4b600384611125565b7ff8000000000000000000000000000000000000000000000000000000000000006001600160f81b031982161015610e0957610d4b600484611125565b7ffc000000000000000000000000000000000000000000000000000000000000006001600160f81b031982161015610e4657610d4b600584611125565b610e51600684611125565b92505b5082610e5f81611138565b935050610ceb565b50909392505050565b600060208284031215610e8257600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461078457600080fd5b60008060008060608587031215610ec857600080fd5b843567ffffffffffffffff80821115610ee057600080fd5b818701915087601f830112610ef457600080fd5b813581811115610f0357600080fd5b886020828501011115610f1557600080fd5b6020928301999098509187013596604001359550909350505050565b60008060408385031215610f4457600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b60006020808385031215610f7c57600080fd5b823567ffffffffffffffff80821115610f9457600080fd5b818501915085601f830112610fa857600080fd5b813581811115610fba57610fba610f53565b8060051b604051601f19603f83011681018181108582111715610fdf57610fdf610f53565b604052918252848201925083810185019188831115610ffd57600080fd5b938501935b8285101561101b57843584529385019392850192611002565b98975050505050505050565b60006020828403121561103957600080fd5b81356001600160a01b038116811461078457600080fd5b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761025f5761025f611050565b60008261109a57634e487b7160e01b600052601260045260246000fd5b500490565b8181038181111561025f5761025f611050565b634e487b7160e01b600052603260045260246000fd5b6020808252825182820181905260009190848201906040850190845b81811015611100578351835292840192918401916001016110e4565b50909695505050505050565b60006020828403121561111e57600080fd5b5051919050565b8082018082111561025f5761025f611050565b60006001820161114a5761114a611050565b506001019056fea264697066735822122050fd4118f6a2086fd3f6fa319db4121267a35231704793e651d26a0aff05d16264736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c8063a200e15311610097578063cd5d2c7411610066578063cd5d2c741461021c578063cf00716f14610225578063d820ed4214610238578063f2fde38b1461024157600080fd5b8063a200e153146101c6578063a34e3596146101cf578063b86360c6146101e2578063c8a4271f146101f557600080fd5b806359b6b86c116100d357806359b6b86c1461017b57806359e1777c14610184578063715018a6146101975780638da5cb5b146101a157600080fd5b806301ffc9a7146101055780630261d9421461012d5780632c0fd74c1461014457806350e9a7151461014d575b600080fd5b610118610113366004610e70565b610254565b60405190151581526020015b60405180910390f35b61013660065481565b604051908152602001610124565b61013660015481565b61016061015b366004610eb2565b610265565b60408051825181526020928301519281019290925201610124565b61013660055481565b610136610192366004610f31565b6102f8565b61019f610393565b005b6000546001600160a01b03165b6040516001600160a01b039091168152602001610124565b61013660035481565b6101366101dd366004610eb2565b6103a7565b6101606101f0366004610eb2565b6103f8565b6101ae7f000000000000000000000000000000000000000000000000000000000000000081565b61013660025481565b61019f610233366004610f69565b61047f565b61013660045481565b61019f61024f366004611027565b610587565b600061025f8261061c565b92915050565b604080518082019091526000808252602082015260006102868686856106b4565b9050604051806040016040528061029c8361078b565b81526020016102ec6102e789898080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508b92508a915061082b9050565b61078b565b90529695505050505050565b60008062015180610311670de0b6b3a764000085611066565b61031b919061107d565b90506000610331670de0b6b3a76400008361107d565b905084811c600061034a670de0b6b3a764000084611066565b610354908561109f565b90506000670de0b6b3a764000061036e8362010000611066565b610378919061107d565b9050600061038682856108ee565b9998505050505050505050565b61039b610c0e565b6103a56000610c68565b565b60006103ef6102e786868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525088925087915061082b9050565b95945050505050565b604080518082019091526000808252602082015260006104198686856106b4565b9050604051806040016040528061042f83610cd0565b81526020016102ec61047a89898080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508b92508a915061082b9050565b610cd0565b610487610c0e565b8060008151811061049a5761049a6110b2565b6020026020010151600181905550806001815181106104bb576104bb6110b2565b6020026020010151600281905550806002815181106104dc576104dc6110b2565b6020026020010151600381905550806003815181106104fd576104fd6110b2565b60200260200101516004819055508060048151811061051e5761051e6110b2565b60200260200101516005819055508060058151811061053f5761053f6110b2565b60200260200101516006819055507f73422d94aedd596c2d4d39f27a01033adc390a9054efaf259afefd95ef7331df8160405161057c91906110c8565b60405180910390a150565b61058f610c0e565b6001600160a01b0381166106105760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b61061981610c68565b50565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a700000000000000000000000000000000000000000000000000000000148061025f57507fffffffff0000000000000000000000000000000000000000000000000000000082167fe88ac7d3000000000000000000000000000000000000000000000000000000001492915050565b6000806106f685858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610ce192505050565b905060006006821061071757836006546107109190611066565b9050610780565b8160050361072d57836005546107109190611066565b8160040361074357836004546107109190611066565b8160030361075957836003546107109190611066565b8160020361076f57836002546107109190611066565b8360015461077d9190611066565b90505b9150505b9392505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166350d25bcd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107ec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610810919061110c565b905080610821846305f5e100611066565b610784919061107d565b600061083a62278d0084611125565b92504283111561084c57506000610784565b6000610858844261109f565b905060006108867f0000000000000000000000000000000000000000000000000000000000000000836102f8565b90507f000000000000000000000000000000000000000000000000000000000000000081106108e2576108d97f00000000000000000000000000000000000000000000000000000000000000008261109f565b92505050610784565b50600095945050505050565b6000600183161561092157670de0b6b3a7640000610914670de0ad151d09418084611066565b61091e919061107d565b91505b600283161561095257670de0b6b3a7640000610945670de0a3769959680084611066565b61094f919061107d565b91505b600483161561098357670de0b6b3a7640000610976670de09039a5fa510084611066565b610980919061107d565b91505b60088316156109b457670de0b6b3a76400006109a7670de069c00f3e120084611066565b6109b1919061107d565b91505b60108316156109e557670de0b6b3a76400006109d8670de01cce21c9440084611066565b6109e2919061107d565b91505b6020831615610a1657670de0b6b3a7640000610a09670ddf82ef46ce100084611066565b610a13919061107d565b91505b6040831615610a4757670de0b6b3a7640000610a3a670dde4f458f8e8d8084611066565b610a44919061107d565b91505b6080831615610a7857670de0b6b3a7640000610a6b670ddbe84213d5f08084611066565b610a75919061107d565b91505b610100831615610aaa57670de0b6b3a7640000610a9d670dd71b7aa6df5b8084611066565b610aa7919061107d565b91505b610200831615610adc57670de0b6b3a7640000610acf670dcd86e7f28cde0084611066565b610ad9919061107d565b91505b610400831615610b0e57670de0b6b3a7640000610b01670dba71a3084ad68084611066565b610b0b919061107d565b91505b610800831615610b4057670de0b6b3a7640000610b33670d94961b13dbde8084611066565b610b3d919061107d565b91505b611000831615610b7257670de0b6b3a7640000610b65670d4a171c35c9838084611066565b610b6f919061107d565b91505b612000831615610ba457670de0b6b3a7640000610b97670cb9da519ccfb70084611066565b610ba1919061107d565b91505b614000831615610bd657670de0b6b3a7640000610bc9670bab76d59c18d68084611066565b610bd3919061107d565b91505b618000831615610c0857670de0b6b3a7640000610bfb6709d025defee4df8084611066565b610c05919061107d565b91505b50919050565b6000546001600160a01b031633146103a55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610607565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600061025f64e8d4a510008361107d565b8051600090819081905b80821015610e67576000858381518110610d0757610d076110b2565b01602001516001600160f81b03191690507f8000000000000000000000000000000000000000000000000000000000000000811015610d5257610d4b600184611125565b9250610e54565b7fe0000000000000000000000000000000000000000000000000000000000000006001600160f81b031982161015610d8f57610d4b600284611125565b7ff0000000000000000000000000000000000000000000000000000000000000006001600160f81b031982161015610dcc57610d4b600384611125565b7ff8000000000000000000000000000000000000000000000000000000000000006001600160f81b031982161015610e0957610d4b600484611125565b7ffc000000000000000000000000000000000000000000000000000000000000006001600160f81b031982161015610e4657610d4b600584611125565b610e51600684611125565b92505b5082610e5f81611138565b935050610ceb565b50909392505050565b600060208284031215610e8257600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461078457600080fd5b60008060008060608587031215610ec857600080fd5b843567ffffffffffffffff80821115610ee057600080fd5b818701915087601f830112610ef457600080fd5b813581811115610f0357600080fd5b886020828501011115610f1557600080fd5b6020928301999098509187013596604001359550909350505050565b60008060408385031215610f4457600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b60006020808385031215610f7c57600080fd5b823567ffffffffffffffff80821115610f9457600080fd5b818501915085601f830112610fa857600080fd5b813581811115610fba57610fba610f53565b8060051b604051601f19603f83011681018181108582111715610fdf57610fdf610f53565b604052918252848201925083810185019188831115610ffd57600080fd5b938501935b8285101561101b57843584529385019392850192611002565b98975050505050505050565b60006020828403121561103957600080fd5b81356001600160a01b038116811461078457600080fd5b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761025f5761025f611050565b60008261109a57634e487b7160e01b600052601260045260246000fd5b500490565b8181038181111561025f5761025f611050565b634e487b7160e01b600052603260045260246000fd5b6020808252825182820181905260009190848201906040850190845b81811015611100578351835292840192918401916001016110e4565b50909695505050505050565b60006020828403121561111e57600080fd5b5051919050565b8082018082111561025f5761025f611050565b60006001820161114a5761114a611050565b506001019056fea264697066735822122050fd4118f6a2086fd3f6fa319db4121267a35231704793e651d26a0aff05d16264736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "decayedPremium(uint256,uint256)": {
        "details": "Returns the premium price at current time elapsed",
        "params": {
          "elapsed": "time past since expiry",
          "startPremium": "starting price"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "premium(string,uint256,uint256)": {
        "details": "Returns the pricing premium in wei."
      },
      "price(string,uint256,uint256)": {
        "details": "Returns the price to register or renew a name.",
        "params": {
          "duration": "How long the name is being registered or extended for, in seconds.",
          "expires": "When the name presently expires (0 if this is a new registration).",
          "name": "The name being registered or renewed."
        },
        "returns": {
          "_0": "base premium tuple of base price + premium price"
        }
      },
      "priceUSDCe(string,uint256,uint256)": {
        "details": "Returns the price in USDC.e to register or renew a name.",
        "params": {
          "duration": "How long the name is being registered or extended for, in seconds.",
          "expires": "When the name presently expires (0 if this is a new registration).",
          "name": "The name being registered or renewed."
        },
        "returns": {
          "_0": "base premium tuple of base price + premium price"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 444,
        "contract": "contracts/ethregistrar/ExponentialPremiumPriceOracle.sol:ExponentialPremiumPriceOracle",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 14281,
        "contract": "contracts/ethregistrar/ExponentialPremiumPriceOracle.sol:ExponentialPremiumPriceOracle",
        "label": "price1Letter",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 14283,
        "contract": "contracts/ethregistrar/ExponentialPremiumPriceOracle.sol:ExponentialPremiumPriceOracle",
        "label": "price2Letter",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 14285,
        "contract": "contracts/ethregistrar/ExponentialPremiumPriceOracle.sol:ExponentialPremiumPriceOracle",
        "label": "price3Letter",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 14287,
        "contract": "contracts/ethregistrar/ExponentialPremiumPriceOracle.sol:ExponentialPremiumPriceOracle",
        "label": "price4Letter",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 14289,
        "contract": "contracts/ethregistrar/ExponentialPremiumPriceOracle.sol:ExponentialPremiumPriceOracle",
        "label": "price5Letter",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 14291,
        "contract": "contracts/ethregistrar/ExponentialPremiumPriceOracle.sol:ExponentialPremiumPriceOracle",
        "label": "price6Letter",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}